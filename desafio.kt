/* // [Template no Kotlin Playground](https://pl.kotl.in/WcteahpyN)

enum class Nivel { BASICO, INTERMEDIARIO, DIFICIL }

class Usuario

data class ConteudoEducacional(var nome: String, val duracao: Int = 60)

data class Formacao(val nome: String, var conteudos: List<ConteudoEducacional>) {

    val inscritos = mutableListOf<Usuario>()
    
    fun matricular(usuario: Usuario) {
        TODO("Utilize o par√¢metro $usuario para simular uma matr√≠cula (usar a lista de $inscritos).")
    }
}

fun main() {
    TODO("Analise as classes modeladas para este dom√≠nio de aplica√ß√£o e pense em formas de evolu√≠-las.")
    TODO("Simule alguns cen√°rios de teste. Para isso, crie alguns objetos usando as classes em quest√£o.")
} */

// Define os n√≠veis poss√≠veis das forma√ß√µes
enum class Nivel { BASICO, INTERMEDIARIO, DIFICIL }

// Representa um usu√°rio
data class Usuario(val nome: String)

// Representa um conte√∫do educacional (m√≥dulo ou aula)
data class ConteudoEducacional(
    var nome: String,
    val duracao: Int = 60 // dura√ß√£o padr√£o em minutos
)

// Representa uma forma√ß√£o composta por v√°rios conte√∫dos
data class Formacao(
    val nome: String,
    val nivel: Nivel,
    var conteudos: List<ConteudoEducacional>
) {
    val inscritos = mutableListOf<Usuario>() // lista mut√°vel de usu√°rios

    // Fun√ß√£o para matricular um usu√°rio
    fun matricular(usuario: Usuario) {
        if (usuario !in inscritos) {
            inscritos.add(usuario)
            println("‚úÖ ${usuario.nome} foi matriculado na forma√ß√£o '$nome' (${nivel.name}).")
        } else {
            println("‚ö†Ô∏è ${usuario.nome} j√° est√° matriculado na forma√ß√£o '$nome'.")
        }
    }

    // Mostra detalhes da forma√ß√£o
    fun exibirInformacoes() {
        println("\nüìò Forma√ß√£o: $nome")
        println("N√≠vel: $nivel")
        println("Conte√∫dos:")
        conteudos.forEach {
            println(" - ${it.nome} (${it.duracao} min)")
        }
        println("Total de inscritos: ${inscritos.size}")
    }
}

// Fun√ß√£o principal para simular cen√°rios de teste
fun main() {
    // Criar conte√∫dos
    val introKotlin = ConteudoEducacional("Introdu√ß√£o ao Kotlin", 80)
    val pooKotlin = ConteudoEducacional("Programa√ß√£o Orientada a Objetos com Kotlin", 120)
    val avancadoKotlin = ConteudoEducacional("Kotlin Avan√ßado e Boas Pr√°ticas", 100)

    // Criar forma√ß√µes
    val formacaoKotlin = Formacao(
        "Forma√ß√£o Desenvolvedor Kotlin",
        Nivel.INTERMEDIARIO,
        listOf(introKotlin, pooKotlin, avancadoKotlin)
    )

    val formacaoAndroid = Formacao(
        "Forma√ß√£o Android com Kotlin",
        Nivel.DIFICIL,
        listOf(
            ConteudoEducacional("Fundamentos do Android", 90),
            ConteudoEducacional("Arquitetura MVVM", 100)
        )
    )

    // Criar usu√°rios
    val usuario1 = Usuario("Alessandro")
    val usuario2 = Usuario("Joana")
    val usuario3 = Usuario("Giselli")

    // Matricular usu√°rios
    formacaoKotlin.matricular(usuario1)
    formacaoKotlin.matricular(usuario2)
    formacaoKotlin.matricular(usuario1) // tentativa duplicada
    formacaoAndroid.matricular(usuario3)

    // Exibir detalhes
    formacaoKotlin.exibirInformacoes()
    formacaoAndroid.exibirInformacoes()
}
